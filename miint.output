Terminales no usados en la gramática

   NOTIN
   TUPLE


Gramática

    0 $accept: lista $end

    1 $@1: %empty

    2 lista: error FIN_DE_LINEA $@1 lista
    3      | FIN_DE_LINEA lista
    4      | func lista
    5      | inst_l FIN_DE_LINEA lista
    6      | inst_l
    7      | %empty

    8 exp_l: exp
    9      | exp ',' exp_l

   10 tupla: '(' exp_l ')'

   11 tupla_decl: '(' tipo_l ')'

   12 func_call: IDENTIFICADOR func_call_init tupla
   13          | IDENTIFICADOR func_call_init '(' ')'

   14 func_call_init: %empty

   15 exp: exp '-' exp
   16    | exp '+' exp
   17    | exp '/' exp
   18    | exp '*' exp
   19    | exp AND exp
   20    | exp OR exp
   21    | comp
   22    | func_call
   23    | VALOR_INT
   24    | VALOR_FLOAT
   25    | VALOR_DOUBLE
   26    | VALOR_LONG
   27    | VALOR_BOOL
   28    | VALOR_CHAR
   29    | VALOR_STRING
   30    | IDENTIFICADOR
   31    | tupla
   32    | exp ACCESO

   33 tipo: tupla_decl
   34     | INT
   35     | FLOAT
   36     | LONG
   37     | DOUBLE
   38     | BOOL
   39     | STRING
   40     | CHAR

   41 tipo_l: tipo
   42       | tipo ',' tipo_l

   43 args: tipo IDENTIFICADOR
   44     | tipo IDENTIFICADOR ',' args

   45 init: tipo IDENTIFICADOR '=' exp FIN_DE_LINEA

   46 assign: IDENTIFICADOR '=' exp FIN_DE_LINEA

   47 decl: tipo IDENTIFICADOR FIN_DE_LINEA

   48 comp: exp MENORQUE exp
   49     | exp MAYORQUE exp
   50     | exp MENORIGUAL exp
   51     | exp MAYORIGUAL exp
   52     | exp IS exp
   53     | exp NOTIS exp

   54 inst: exp FIN_DE_LINEA
   55     | init
   56     | assign
   57     | decl
   58     | when
   59     | for
   60     | while
   61     | if
   62     | bloque
   63     | RETURN exp FIN_DE_LINEA

   64 inst_l: inst
   65       | inst inst_l

   66 $@2: %empty

   67 bloque: ABREBLOQUE $@2 dentroBloque CIERRABLOQUE

   68 dentroBloque: inst_l

   69 @3: %empty

   70 func: tipo IDENTIFICADOR '(' ')' @3 ':' FIN_DE_LINEA bloque funcFinal

   71 @4: %empty

   72 func: tipo IDENTIFICADOR '(' args ')' @4 ':' FIN_DE_LINEA bloque funcFinal

   73 @5: %empty

   74 func: VOID IDENTIFICADOR '(' ')' @5 ':' FIN_DE_LINEA bloque funcFinal

   75 @6: %empty

   76 func: VOID IDENTIFICADOR '(' args ')' @6 ':' FIN_DE_LINEA bloque funcFinal

   77 funcFinal: %empty

   78 cases: exp case_cond WHEN_CASE exp case_jump

   79 @7: %empty

   80 cases: exp case_cond WHEN_CASE exp case_jump FIN_DE_LINEA @7 cases

   81 case_cond: %empty

   82 case_jump: %empty

   83 @8: %empty

   84 when: WHEN exp ':' FIN_DE_LINEA ABREBLOQUE @8 cases CIERRABLOQUE

   85 $@9: %empty

   86 for: FOR IDENTIFICADOR IN rango ne ne ':' FIN_DE_LINEA $@9 bloque

   87 if: IF exp ':' FIN_DE_LINEA ne if_evalua_expresion bloque

   88 @10: %empty

   89 if: IF exp ':' FIN_DE_LINEA ne if_evalua_expresion bloque ne @10 elif_l

   90 elif_l: ELIF elif_control exp ':' FIN_DE_LINEA ne elif_eval bloque
   91       | ELIF elif_control exp ':' FIN_DE_LINEA ne elif_eval bloque elif_copia_salida elif_copia_siguiente elif_l

   92 $@11: %empty

   93 elif_l: ELSE ':' FIN_DE_LINEA $@11 bloque

   94 ne: %empty

   95 elif_control: %empty

   96 elif_eval: %empty

   97 if_evalua_expresion: %empty

   98 elif_copia_salida: %empty

   99 elif_copia_siguiente: %empty

  100 $@12: %empty

  101 $@13: %empty

  102 while: WHILE ne ne $@12 exp ':' $@13 FIN_DE_LINEA bloque

  103 rango: exp RANGE exp
  104      | exp RANGE exp ',' exp


Terminales con las reglas donde aparecen

$end (0) 0
'(' (40) 10 11 13 70 72 74 76
')' (41) 10 11 13 70 72 74 76
'*' (42) 18
'+' (43) 16
',' (44) 9 42 44 104
'-' (45) 15
'/' (47) 17
':' (58) 70 72 74 76 84 86 87 89 90 91 93 102
'=' (61) 45 46
error (256) 2
VALOR_FLOAT (258) 24
VALOR_DOUBLE (259) 25
VALOR_INT (260) 23
VALOR_BOOL (261) 27
ACCESO (262) 32
VALOR_LONG (263) 26
VALOR_CHAR (264) 28
VALOR_STRING (265) 29
IDENTIFICADOR (266) 12 13 30 43 44 45 46 47 70 72 74 76 86
FIN_DE_LINEA (267) 2 3 5 45 46 47 54 63 70 72 74 76 80 84 86 87 89
    90 91 93 102
INT (268) 34
LONG (269) 36
FLOAT (270) 35
DOUBLE (271) 37
BOOL (272) 38
STRING (273) 39
VOID (274) 74 76
CHAR (275) 40
WHEN (276) 84
WHEN_CASE (277) 78 80
IF (278) 87 89
ELIF (279) 90 91
ELSE (280) 93
WHILE (281) 102
FOR (282) 86
NOTIS (283) 53
IS (284) 52
OR (285) 20
AND (286) 19
RANGE (287) 103 104
RETURN (288) 63
ABREBLOQUE (289) 67 84
CIERRABLOQUE (290) 67 84
IN (291) 86
NOTIN (292)
MAYORIGUAL (293) 51
MENORIGUAL (294) 50
MAYORQUE (295) 49
MENORQUE (296) 48
TUPLE (297)


No terminales con las reglas donde aparecen

$accept (52)
    en la izquierda: 0
lista (53)
    en la izquierda: 2 3 4 5 6 7, en la derecha: 0 2 3 4 5
$@1 (54)
    en la izquierda: 1, en la derecha: 2
exp_l (55)
    en la izquierda: 8 9, en la derecha: 9 10
tupla (56)
    en la izquierda: 10, en la derecha: 12 31
tupla_decl (57)
    en la izquierda: 11, en la derecha: 33
func_call (58)
    en la izquierda: 12 13, en la derecha: 22
func_call_init (59)
    en la izquierda: 14, en la derecha: 12 13
exp (60)
    en la izquierda: 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30
    31 32, en la derecha: 8 9 15 16 17 18 19 20 32 45 46 48 49 50 51
    52 53 54 63 78 80 84 87 89 90 91 102 103 104
tipo (61)
    en la izquierda: 33 34 35 36 37 38 39 40, en la derecha: 41 42
    43 44 45 47 70 72
tipo_l (62)
    en la izquierda: 41 42, en la derecha: 11 42
args (63)
    en la izquierda: 43 44, en la derecha: 44 72 76
init (64)
    en la izquierda: 45, en la derecha: 55
assign (65)
    en la izquierda: 46, en la derecha: 56
decl (66)
    en la izquierda: 47, en la derecha: 57
comp (67)
    en la izquierda: 48 49 50 51 52 53, en la derecha: 21
inst (68)
    en la izquierda: 54 55 56 57 58 59 60 61 62 63, en la derecha:
    64 65
inst_l (69)
    en la izquierda: 64 65, en la derecha: 5 6 65 68
bloque (70)
    en la izquierda: 67, en la derecha: 62 70 72 74 76 86 87 89 90
    91 93 102
$@2 (71)
    en la izquierda: 66, en la derecha: 67
dentroBloque (72)
    en la izquierda: 68, en la derecha: 67
func (73)
    en la izquierda: 70 72 74 76, en la derecha: 4
@3 (74)
    en la izquierda: 69, en la derecha: 70
@4 (75)
    en la izquierda: 71, en la derecha: 72
@5 (76)
    en la izquierda: 73, en la derecha: 74
@6 (77)
    en la izquierda: 75, en la derecha: 76
funcFinal (78)
    en la izquierda: 77, en la derecha: 70 72 74 76
cases (79)
    en la izquierda: 78 80, en la derecha: 80 84
@7 (80)
    en la izquierda: 79, en la derecha: 80
case_cond (81)
    en la izquierda: 81, en la derecha: 78 80
case_jump (82)
    en la izquierda: 82, en la derecha: 78 80
when (83)
    en la izquierda: 84, en la derecha: 58
@8 (84)
    en la izquierda: 83, en la derecha: 84
for (85)
    en la izquierda: 86, en la derecha: 59
$@9 (86)
    en la izquierda: 85, en la derecha: 86
if (87)
    en la izquierda: 87 89, en la derecha: 61
@10 (88)
    en la izquierda: 88, en la derecha: 89
elif_l (89)
    en la izquierda: 90 91 93, en la derecha: 89 91
$@11 (90)
    en la izquierda: 92, en la derecha: 93
ne (91)
    en la izquierda: 94, en la derecha: 86 87 89 90 91 102
elif_control (92)
    en la izquierda: 95, en la derecha: 90 91
elif_eval (93)
    en la izquierda: 96, en la derecha: 90 91
if_evalua_expresion (94)
    en la izquierda: 97, en la derecha: 87 89
elif_copia_salida (95)
    en la izquierda: 98, en la derecha: 91
elif_copia_siguiente (96)
    en la izquierda: 99, en la derecha: 91
while (97)
    en la izquierda: 102, en la derecha: 60
$@12 (98)
    en la izquierda: 100, en la derecha: 102
$@13 (99)
    en la izquierda: 101, en la derecha: 102
rango (100)
    en la izquierda: 103 104, en la derecha: 86


Estado 0

    0 $accept: . lista $end

    error          desplazar e ir al estado 1
    VALOR_FLOAT    desplazar e ir al estado 2
    VALOR_DOUBLE   desplazar e ir al estado 3
    VALOR_INT      desplazar e ir al estado 4
    VALOR_BOOL     desplazar e ir al estado 5
    VALOR_LONG     desplazar e ir al estado 6
    VALOR_CHAR     desplazar e ir al estado 7
    VALOR_STRING   desplazar e ir al estado 8
    IDENTIFICADOR  desplazar e ir al estado 9
    FIN_DE_LINEA   desplazar e ir al estado 10
    INT            desplazar e ir al estado 11
    LONG           desplazar e ir al estado 12
    FLOAT          desplazar e ir al estado 13
    DOUBLE         desplazar e ir al estado 14
    BOOL           desplazar e ir al estado 15
    STRING         desplazar e ir al estado 16
    VOID           desplazar e ir al estado 17
    CHAR           desplazar e ir al estado 18
    WHEN           desplazar e ir al estado 19
    IF             desplazar e ir al estado 20
    WHILE          desplazar e ir al estado 21
    FOR            desplazar e ir al estado 22
    RETURN         desplazar e ir al estado 23
    ABREBLOQUE     desplazar e ir al estado 24
    '('            desplazar e ir al estado 25

    $end  reduce usando la regla 7 (lista)

    lista       ir al estado 26
    tupla       ir al estado 27
    tupla_decl  ir al estado 28
    func_call   ir al estado 29
    exp         ir al estado 30
    tipo        ir al estado 31
    init        ir al estado 32
    assign      ir al estado 33
    decl        ir al estado 34
    comp        ir al estado 35
    inst        ir al estado 36
    inst_l      ir al estado 37
    bloque      ir al estado 38
    func        ir al estado 39
    when        ir al estado 40
    for         ir al estado 41
    if          ir al estado 42
    while       ir al estado 43


Estado 1

    2 lista: error . FIN_DE_LINEA $@1 lista

    FIN_DE_LINEA  desplazar e ir al estado 44


Estado 2

   24 exp: VALOR_FLOAT .

    $default  reduce usando la regla 24 (exp)


Estado 3

   25 exp: VALOR_DOUBLE .

    $default  reduce usando la regla 25 (exp)


Estado 4

   23 exp: VALOR_INT .

    $default  reduce usando la regla 23 (exp)


Estado 5

   27 exp: VALOR_BOOL .

    $default  reduce usando la regla 27 (exp)


Estado 6

   26 exp: VALOR_LONG .

    $default  reduce usando la regla 26 (exp)


Estado 7

   28 exp: VALOR_CHAR .

    $default  reduce usando la regla 28 (exp)


Estado 8

   29 exp: VALOR_STRING .

    $default  reduce usando la regla 29 (exp)


Estado 9

   12 func_call: IDENTIFICADOR . func_call_init tupla
   13          | IDENTIFICADOR . func_call_init '(' ')'
   30 exp: IDENTIFICADOR .
   46 assign: IDENTIFICADOR . '=' exp FIN_DE_LINEA

    '='  desplazar e ir al estado 45

    '('       reduce usando la regla 14 (func_call_init)
    $default  reduce usando la regla 30 (exp)

    func_call_init  ir al estado 46


Estado 10

    3 lista: FIN_DE_LINEA . lista

    error          desplazar e ir al estado 1
    VALOR_FLOAT    desplazar e ir al estado 2
    VALOR_DOUBLE   desplazar e ir al estado 3
    VALOR_INT      desplazar e ir al estado 4
    VALOR_BOOL     desplazar e ir al estado 5
    VALOR_LONG     desplazar e ir al estado 6
    VALOR_CHAR     desplazar e ir al estado 7
    VALOR_STRING   desplazar e ir al estado 8
    IDENTIFICADOR  desplazar e ir al estado 9
    FIN_DE_LINEA   desplazar e ir al estado 10
    INT            desplazar e ir al estado 11
    LONG           desplazar e ir al estado 12
    FLOAT          desplazar e ir al estado 13
    DOUBLE         desplazar e ir al estado 14
    BOOL           desplazar e ir al estado 15
    STRING         desplazar e ir al estado 16
    VOID           desplazar e ir al estado 17
    CHAR           desplazar e ir al estado 18
    WHEN           desplazar e ir al estado 19
    IF             desplazar e ir al estado 20
    WHILE          desplazar e ir al estado 21
    FOR            desplazar e ir al estado 22
    RETURN         desplazar e ir al estado 23
    ABREBLOQUE     desplazar e ir al estado 24
    '('            desplazar e ir al estado 25

    $end  reduce usando la regla 7 (lista)

    lista       ir al estado 47
    tupla       ir al estado 27
    tupla_decl  ir al estado 28
    func_call   ir al estado 29
    exp         ir al estado 30
    tipo        ir al estado 31
    init        ir al estado 32
    assign      ir al estado 33
    decl        ir al estado 34
    comp        ir al estado 35
    inst        ir al estado 36
    inst_l      ir al estado 37
    bloque      ir al estado 38
    func        ir al estado 39
    when        ir al estado 40
    for         ir al estado 41
    if          ir al estado 42
    while       ir al estado 43


Estado 11

   34 tipo: INT .

    $default  reduce usando la regla 34 (tipo)


Estado 12

   36 tipo: LONG .

    $default  reduce usando la regla 36 (tipo)


Estado 13

   35 tipo: FLOAT .

    $default  reduce usando la regla 35 (tipo)


Estado 14

   37 tipo: DOUBLE .

    $default  reduce usando la regla 37 (tipo)


Estado 15

   38 tipo: BOOL .

    $default  reduce usando la regla 38 (tipo)


Estado 16

   39 tipo: STRING .

    $default  reduce usando la regla 39 (tipo)


Estado 17

   74 func: VOID . IDENTIFICADOR '(' ')' @5 ':' FIN_DE_LINEA bloque funcFinal
   76     | VOID . IDENTIFICADOR '(' args ')' @6 ':' FIN_DE_LINEA bloque funcFinal

    IDENTIFICADOR  desplazar e ir al estado 48


Estado 18

   40 tipo: CHAR .

    $default  reduce usando la regla 40 (tipo)


Estado 19

   84 when: WHEN . exp ':' FIN_DE_LINEA ABREBLOQUE @8 cases CIERRABLOQUE

    VALOR_FLOAT    desplazar e ir al estado 2
    VALOR_DOUBLE   desplazar e ir al estado 3
    VALOR_INT      desplazar e ir al estado 4
    VALOR_BOOL     desplazar e ir al estado 5
    VALOR_LONG     desplazar e ir al estado 6
    VALOR_CHAR     desplazar e ir al estado 7
    VALOR_STRING   desplazar e ir al estado 8
    IDENTIFICADOR  desplazar e ir al estado 49
    '('            desplazar e ir al estado 50

    tupla      ir al estado 27
    func_call  ir al estado 29
    exp        ir al estado 51
    comp       ir al estado 35


Estado 20

   87 if: IF . exp ':' FIN_DE_LINEA ne if_evalua_expresion bloque
   89   | IF . exp ':' FIN_DE_LINEA ne if_evalua_expresion bloque ne @10 elif_l

    VALOR_FLOAT    desplazar e ir al estado 2
    VALOR_DOUBLE   desplazar e ir al estado 3
    VALOR_INT      desplazar e ir al estado 4
    VALOR_BOOL     desplazar e ir al estado 5
    VALOR_LONG     desplazar e ir al estado 6
    VALOR_CHAR     desplazar e ir al estado 7
    VALOR_STRING   desplazar e ir al estado 8
    IDENTIFICADOR  desplazar e ir al estado 49
    '('            desplazar e ir al estado 50

    tupla      ir al estado 27
    func_call  ir al estado 29
    exp        ir al estado 52
    comp       ir al estado 35


Estado 21

  102 while: WHILE . ne ne $@12 exp ':' $@13 FIN_DE_LINEA bloque

    $default  reduce usando la regla 94 (ne)

    ne  ir al estado 53


Estado 22

   86 for: FOR . IDENTIFICADOR IN rango ne ne ':' FIN_DE_LINEA $@9 bloque

    IDENTIFICADOR  desplazar e ir al estado 54


Estado 23

   63 inst: RETURN . exp FIN_DE_LINEA

    VALOR_FLOAT    desplazar e ir al estado 2
    VALOR_DOUBLE   desplazar e ir al estado 3
    VALOR_INT      desplazar e ir al estado 4
    VALOR_BOOL     desplazar e ir al estado 5
    VALOR_LONG     desplazar e ir al estado 6
    VALOR_CHAR     desplazar e ir al estado 7
    VALOR_STRING   desplazar e ir al estado 8
    IDENTIFICADOR  desplazar e ir al estado 49
    '('            desplazar e ir al estado 50

    tupla      ir al estado 27
    func_call  ir al estado 29
    exp        ir al estado 55
    comp       ir al estado 35


Estado 24

   67 bloque: ABREBLOQUE . $@2 dentroBloque CIERRABLOQUE

    $default  reduce usando la regla 66 ($@2)

    $@2  ir al estado 56


Estado 25

   10 tupla: '(' . exp_l ')'
   11 tupla_decl: '(' . tipo_l ')'

    VALOR_FLOAT    desplazar e ir al estado 2
    VALOR_DOUBLE   desplazar e ir al estado 3
    VALOR_INT      desplazar e ir al estado 4
    VALOR_BOOL     desplazar e ir al estado 5
    VALOR_LONG     desplazar e ir al estado 6
    VALOR_CHAR     desplazar e ir al estado 7
    VALOR_STRING   desplazar e ir al estado 8
    IDENTIFICADOR  desplazar e ir al estado 49
    INT            desplazar e ir al estado 11
    LONG           desplazar e ir al estado 12
    FLOAT          desplazar e ir al estado 13
    DOUBLE         desplazar e ir al estado 14
    BOOL           desplazar e ir al estado 15
    STRING         desplazar e ir al estado 16
    CHAR           desplazar e ir al estado 18
    '('            desplazar e ir al estado 25

    exp_l       ir al estado 57
    tupla       ir al estado 27
    tupla_decl  ir al estado 28
    func_call   ir al estado 29
    exp         ir al estado 58
    tipo        ir al estado 59
    tipo_l      ir al estado 60
    comp        ir al estado 35


Estado 26

    0 $accept: lista . $end

    $end  desplazar e ir al estado 61


Estado 27

   31 exp: tupla .

    $default  reduce usando la regla 31 (exp)


Estado 28

   33 tipo: tupla_decl .

    $default  reduce usando la regla 33 (tipo)


Estado 29

   22 exp: func_call .

    $default  reduce usando la regla 22 (exp)


Estado 30

   15 exp: exp . '-' exp
   16    | exp . '+' exp
   17    | exp . '/' exp
   18    | exp . '*' exp
   19    | exp . AND exp
   20    | exp . OR exp
   32    | exp . ACCESO
   48 comp: exp . MENORQUE exp
   49     | exp . MAYORQUE exp
   50     | exp . MENORIGUAL exp
   51     | exp . MAYORIGUAL exp
   52     | exp . IS exp
   53     | exp . NOTIS exp
   54 inst: exp . FIN_DE_LINEA

    ACCESO        desplazar e ir al estado 62
    FIN_DE_LINEA  desplazar e ir al estado 63
    NOTIS         desplazar e ir al estado 64
    IS            desplazar e ir al estado 65
    OR            desplazar e ir al estado 66
    AND           desplazar e ir al estado 67
    MAYORIGUAL    desplazar e ir al estado 68
    MENORIGUAL    desplazar e ir al estado 69
    MAYORQUE      desplazar e ir al estado 70
    MENORQUE      desplazar e ir al estado 71
    '-'           desplazar e ir al estado 72
    '+'           desplazar e ir al estado 73
    '*'           desplazar e ir al estado 74
    '/'           desplazar e ir al estado 75


Estado 31

   45 init: tipo . IDENTIFICADOR '=' exp FIN_DE_LINEA
   47 decl: tipo . IDENTIFICADOR FIN_DE_LINEA
   70 func: tipo . IDENTIFICADOR '(' ')' @3 ':' FIN_DE_LINEA bloque funcFinal
   72     | tipo . IDENTIFICADOR '(' args ')' @4 ':' FIN_DE_LINEA bloque funcFinal

    IDENTIFICADOR  desplazar e ir al estado 76


Estado 32

   55 inst: init .

    $default  reduce usando la regla 55 (inst)


Estado 33

   56 inst: assign .

    $default  reduce usando la regla 56 (inst)


Estado 34

   57 inst: decl .

    $default  reduce usando la regla 57 (inst)


Estado 35

   21 exp: comp .

    $default  reduce usando la regla 21 (exp)


Estado 36

   64 inst_l: inst .
   65       | inst . inst_l

    VALOR_FLOAT    desplazar e ir al estado 2
    VALOR_DOUBLE   desplazar e ir al estado 3
    VALOR_INT      desplazar e ir al estado 4
    VALOR_BOOL     desplazar e ir al estado 5
    VALOR_LONG     desplazar e ir al estado 6
    VALOR_CHAR     desplazar e ir al estado 7
    VALOR_STRING   desplazar e ir al estado 8
    IDENTIFICADOR  desplazar e ir al estado 9
    INT            desplazar e ir al estado 11
    LONG           desplazar e ir al estado 12
    FLOAT          desplazar e ir al estado 13
    DOUBLE         desplazar e ir al estado 14
    BOOL           desplazar e ir al estado 15
    STRING         desplazar e ir al estado 16
    CHAR           desplazar e ir al estado 18
    WHEN           desplazar e ir al estado 19
    IF             desplazar e ir al estado 20
    WHILE          desplazar e ir al estado 21
    FOR            desplazar e ir al estado 22
    RETURN         desplazar e ir al estado 23
    ABREBLOQUE     desplazar e ir al estado 24
    '('            desplazar e ir al estado 25

    $default  reduce usando la regla 64 (inst_l)

    tupla       ir al estado 27
    tupla_decl  ir al estado 28
    func_call   ir al estado 29
    exp         ir al estado 30
    tipo        ir al estado 77
    init        ir al estado 32
    assign      ir al estado 33
    decl        ir al estado 34
    comp        ir al estado 35
    inst        ir al estado 36
    inst_l      ir al estado 78
    bloque      ir al estado 38
    when        ir al estado 40
    for         ir al estado 41
    if          ir al estado 42
    while       ir al estado 43


Estado 37

    5 lista: inst_l . FIN_DE_LINEA lista
    6      | inst_l .

    FIN_DE_LINEA  desplazar e ir al estado 79

    $default  reduce usando la regla 6 (lista)


Estado 38

   62 inst: bloque .

    $default  reduce usando la regla 62 (inst)


Estado 39

    4 lista: func . lista

    error          desplazar e ir al estado 1
    VALOR_FLOAT    desplazar e ir al estado 2
    VALOR_DOUBLE   desplazar e ir al estado 3
    VALOR_INT      desplazar e ir al estado 4
    VALOR_BOOL     desplazar e ir al estado 5
    VALOR_LONG     desplazar e ir al estado 6
    VALOR_CHAR     desplazar e ir al estado 7
    VALOR_STRING   desplazar e ir al estado 8
    IDENTIFICADOR  desplazar e ir al estado 9
    FIN_DE_LINEA   desplazar e ir al estado 10
    INT            desplazar e ir al estado 11
    LONG           desplazar e ir al estado 12
    FLOAT          desplazar e ir al estado 13
    DOUBLE         desplazar e ir al estado 14
    BOOL           desplazar e ir al estado 15
    STRING         desplazar e ir al estado 16
    VOID           desplazar e ir al estado 17
    CHAR           desplazar e ir al estado 18
    WHEN           desplazar e ir al estado 19
    IF             desplazar e ir al estado 20
    WHILE          desplazar e ir al estado 21
    FOR            desplazar e ir al estado 22
    RETURN         desplazar e ir al estado 23
    ABREBLOQUE     desplazar e ir al estado 24
    '('            desplazar e ir al estado 25

    $end  reduce usando la regla 7 (lista)

    lista       ir al estado 80
    tupla       ir al estado 27
    tupla_decl  ir al estado 28
    func_call   ir al estado 29
    exp         ir al estado 30
    tipo        ir al estado 31
    init        ir al estado 32
    assign      ir al estado 33
    decl        ir al estado 34
    comp        ir al estado 35
    inst        ir al estado 36
    inst_l      ir al estado 37
    bloque      ir al estado 38
    func        ir al estado 39
    when        ir al estado 40
    for         ir al estado 41
    if          ir al estado 42
    while       ir al estado 43


Estado 40

   58 inst: when .

    $default  reduce usando la regla 58 (inst)


Estado 41

   59 inst: for .

    $default  reduce usando la regla 59 (inst)


Estado 42

   61 inst: if .

    $default  reduce usando la regla 61 (inst)


Estado 43

   60 inst: while .

    $default  reduce usando la regla 60 (inst)


Estado 44

    2 lista: error FIN_DE_LINEA . $@1 lista

    $default  reduce usando la regla 1 ($@1)

    $@1  ir al estado 81


Estado 45

   46 assign: IDENTIFICADOR '=' . exp FIN_DE_LINEA

    VALOR_FLOAT    desplazar e ir al estado 2
    VALOR_DOUBLE   desplazar e ir al estado 3
    VALOR_INT      desplazar e ir al estado 4
    VALOR_BOOL     desplazar e ir al estado 5
    VALOR_LONG     desplazar e ir al estado 6
    VALOR_CHAR     desplazar e ir al estado 7
    VALOR_STRING   desplazar e ir al estado 8
    IDENTIFICADOR  desplazar e ir al estado 49
    '('            desplazar e ir al estado 50

    tupla      ir al estado 27
    func_call  ir al estado 29
    exp        ir al estado 82
    comp       ir al estado 35


Estado 46

   12 func_call: IDENTIFICADOR func_call_init . tupla
   13          | IDENTIFICADOR func_call_init . '(' ')'

    '('  desplazar e ir al estado 83

    tupla  ir al estado 84


Estado 47

    3 lista: FIN_DE_LINEA lista .

    $default  reduce usando la regla 3 (lista)


Estado 48

   74 func: VOID IDENTIFICADOR . '(' ')' @5 ':' FIN_DE_LINEA bloque funcFinal
   76     | VOID IDENTIFICADOR . '(' args ')' @6 ':' FIN_DE_LINEA bloque funcFinal

    '('  desplazar e ir al estado 85


Estado 49

   12 func_call: IDENTIFICADOR . func_call_init tupla
   13          | IDENTIFICADOR . func_call_init '(' ')'
   30 exp: IDENTIFICADOR .

    '('       reduce usando la regla 14 (func_call_init)
    $default  reduce usando la regla 30 (exp)

    func_call_init  ir al estado 46


Estado 50

   10 tupla: '(' . exp_l ')'

    VALOR_FLOAT    desplazar e ir al estado 2
    VALOR_DOUBLE   desplazar e ir al estado 3
    VALOR_INT      desplazar e ir al estado 4
    VALOR_BOOL     desplazar e ir al estado 5
    VALOR_LONG     desplazar e ir al estado 6
    VALOR_CHAR     desplazar e ir al estado 7
    VALOR_STRING   desplazar e ir al estado 8
    IDENTIFICADOR  desplazar e ir al estado 49
    '('            desplazar e ir al estado 50

    exp_l      ir al estado 57
    tupla      ir al estado 27
    func_call  ir al estado 29
    exp        ir al estado 58
    comp       ir al estado 35


Estado 51

   15 exp: exp . '-' exp
   16    | exp . '+' exp
   17    | exp . '/' exp
   18    | exp . '*' exp
   19    | exp . AND exp
   20    | exp . OR exp
   32    | exp . ACCESO
   48 comp: exp . MENORQUE exp
   49     | exp . MAYORQUE exp
   50     | exp . MENORIGUAL exp
   51     | exp . MAYORIGUAL exp
   52     | exp . IS exp
   53     | exp . NOTIS exp
   84 when: WHEN exp . ':' FIN_DE_LINEA ABREBLOQUE @8 cases CIERRABLOQUE

    ACCESO      desplazar e ir al estado 62
    NOTIS       desplazar e ir al estado 64
    IS          desplazar e ir al estado 65
    OR          desplazar e ir al estado 66
    AND         desplazar e ir al estado 67
    MAYORIGUAL  desplazar e ir al estado 68
    MENORIGUAL  desplazar e ir al estado 69
    MAYORQUE    desplazar e ir al estado 70
    MENORQUE    desplazar e ir al estado 71
    '-'         desplazar e ir al estado 72
    '+'         desplazar e ir al estado 73
    '*'         desplazar e ir al estado 74
    '/'         desplazar e ir al estado 75
    ':'         desplazar e ir al estado 86


Estado 52

   15 exp: exp . '-' exp
   16    | exp . '+' exp
   17    | exp . '/' exp
   18    | exp . '*' exp
   19    | exp . AND exp
   20    | exp . OR exp
   32    | exp . ACCESO
   48 comp: exp . MENORQUE exp
   49     | exp . MAYORQUE exp
   50     | exp . MENORIGUAL exp
   51     | exp . MAYORIGUAL exp
   52     | exp . IS exp
   53     | exp . NOTIS exp
   87 if: IF exp . ':' FIN_DE_LINEA ne if_evalua_expresion bloque
   89   | IF exp . ':' FIN_DE_LINEA ne if_evalua_expresion bloque ne @10 elif_l

    ACCESO      desplazar e ir al estado 62
    NOTIS       desplazar e ir al estado 64
    IS          desplazar e ir al estado 65
    OR          desplazar e ir al estado 66
    AND         desplazar e ir al estado 67
    MAYORIGUAL  desplazar e ir al estado 68
    MENORIGUAL  desplazar e ir al estado 69
    MAYORQUE    desplazar e ir al estado 70
    MENORQUE    desplazar e ir al estado 71
    '-'         desplazar e ir al estado 72
    '+'         desplazar e ir al estado 73
    '*'         desplazar e ir al estado 74
    '/'         desplazar e ir al estado 75
    ':'         desplazar e ir al estado 87


Estado 53

  102 while: WHILE ne . ne $@12 exp ':' $@13 FIN_DE_LINEA bloque

    $default  reduce usando la regla 94 (ne)

    ne  ir al estado 88


Estado 54

   86 for: FOR IDENTIFICADOR . IN rango ne ne ':' FIN_DE_LINEA $@9 bloque

    IN  desplazar e ir al estado 89


Estado 55

   15 exp: exp . '-' exp
   16    | exp . '+' exp
   17    | exp . '/' exp
   18    | exp . '*' exp
   19    | exp . AND exp
   20    | exp . OR exp
   32    | exp . ACCESO
   48 comp: exp . MENORQUE exp
   49     | exp . MAYORQUE exp
   50     | exp . MENORIGUAL exp
   51     | exp . MAYORIGUAL exp
   52     | exp . IS exp
   53     | exp . NOTIS exp
   63 inst: RETURN exp . FIN_DE_LINEA

    ACCESO        desplazar e ir al estado 62
    FIN_DE_LINEA  desplazar e ir al estado 90
    NOTIS         desplazar e ir al estado 64
    IS            desplazar e ir al estado 65
    OR            desplazar e ir al estado 66
    AND           desplazar e ir al estado 67
    MAYORIGUAL    desplazar e ir al estado 68
    MENORIGUAL    desplazar e ir al estado 69
    MAYORQUE      desplazar e ir al estado 70
    MENORQUE      desplazar e ir al estado 71
    '-'           desplazar e ir al estado 72
    '+'           desplazar e ir al estado 73
    '*'           desplazar e ir al estado 74
    '/'           desplazar e ir al estado 75


Estado 56

   67 bloque: ABREBLOQUE $@2 . dentroBloque CIERRABLOQUE

    VALOR_FLOAT    desplazar e ir al estado 2
    VALOR_DOUBLE   desplazar e ir al estado 3
    VALOR_INT      desplazar e ir al estado 4
    VALOR_BOOL     desplazar e ir al estado 5
    VALOR_LONG     desplazar e ir al estado 6
    VALOR_CHAR     desplazar e ir al estado 7
    VALOR_STRING   desplazar e ir al estado 8
    IDENTIFICADOR  desplazar e ir al estado 9
    INT            desplazar e ir al estado 11
    LONG           desplazar e ir al estado 12
    FLOAT          desplazar e ir al estado 13
    DOUBLE         desplazar e ir al estado 14
    BOOL           desplazar e ir al estado 15
    STRING         desplazar e ir al estado 16
    CHAR           desplazar e ir al estado 18
    WHEN           desplazar e ir al estado 19
    IF             desplazar e ir al estado 20
    WHILE          desplazar e ir al estado 21
    FOR            desplazar e ir al estado 22
    RETURN         desplazar e ir al estado 23
    ABREBLOQUE     desplazar e ir al estado 24
    '('            desplazar e ir al estado 25

    tupla         ir al estado 27
    tupla_decl    ir al estado 28
    func_call     ir al estado 29
    exp           ir al estado 30
    tipo          ir al estado 77
    init          ir al estado 32
    assign        ir al estado 33
    decl          ir al estado 34
    comp          ir al estado 35
    inst          ir al estado 36
    inst_l        ir al estado 91
    bloque        ir al estado 38
    dentroBloque  ir al estado 92
    when          ir al estado 40
    for           ir al estado 41
    if            ir al estado 42
    while         ir al estado 43


Estado 57

   10 tupla: '(' exp_l . ')'

    ')'  desplazar e ir al estado 93


Estado 58

    8 exp_l: exp .
    9      | exp . ',' exp_l
   15 exp: exp . '-' exp
   16    | exp . '+' exp
   17    | exp . '/' exp
   18    | exp . '*' exp
   19    | exp . AND exp
   20    | exp . OR exp
   32    | exp . ACCESO
   48 comp: exp . MENORQUE exp
   49     | exp . MAYORQUE exp
   50     | exp . MENORIGUAL exp
   51     | exp . MAYORIGUAL exp
   52     | exp . IS exp
   53     | exp . NOTIS exp

    ACCESO      desplazar e ir al estado 62
    NOTIS       desplazar e ir al estado 64
    IS          desplazar e ir al estado 65
    OR          desplazar e ir al estado 66
    AND         desplazar e ir al estado 67
    MAYORIGUAL  desplazar e ir al estado 68
    MENORIGUAL  desplazar e ir al estado 69
    MAYORQUE    desplazar e ir al estado 70
    MENORQUE    desplazar e ir al estado 71
    ','         desplazar e ir al estado 94
    '-'         desplazar e ir al estado 72
    '+'         desplazar e ir al estado 73
    '*'         desplazar e ir al estado 74
    '/'         desplazar e ir al estado 75

    $default  reduce usando la regla 8 (exp_l)


Estado 59

   41 tipo_l: tipo .
   42       | tipo . ',' tipo_l

    ','  desplazar e ir al estado 95

    $default  reduce usando la regla 41 (tipo_l)


Estado 60

   11 tupla_decl: '(' tipo_l . ')'

    ')'  desplazar e ir al estado 96


Estado 61

    0 $accept: lista $end .

    $default  aceptar


Estado 62

   32 exp: exp ACCESO .

    $default  reduce usando la regla 32 (exp)


Estado 63

   54 inst: exp FIN_DE_LINEA .

    $default  reduce usando la regla 54 (inst)


Estado 64

   53 comp: exp NOTIS . exp

    VALOR_FLOAT    desplazar e ir al estado 2
    VALOR_DOUBLE   desplazar e ir al estado 3
    VALOR_INT      desplazar e ir al estado 4
    VALOR_BOOL     desplazar e ir al estado 5
    VALOR_LONG     desplazar e ir al estado 6
    VALOR_CHAR     desplazar e ir al estado 7
    VALOR_STRING   desplazar e ir al estado 8
    IDENTIFICADOR  desplazar e ir al estado 49
    '('            desplazar e ir al estado 50

    tupla      ir al estado 27
    func_call  ir al estado 29
    exp        ir al estado 97
    comp       ir al estado 35


Estado 65

   52 comp: exp IS . exp

    VALOR_FLOAT    desplazar e ir al estado 2
    VALOR_DOUBLE   desplazar e ir al estado 3
    VALOR_INT      desplazar e ir al estado 4
    VALOR_BOOL     desplazar e ir al estado 5
    VALOR_LONG     desplazar e ir al estado 6
    VALOR_CHAR     desplazar e ir al estado 7
    VALOR_STRING   desplazar e ir al estado 8
    IDENTIFICADOR  desplazar e ir al estado 49
    '('            desplazar e ir al estado 50

    tupla      ir al estado 27
    func_call  ir al estado 29
    exp        ir al estado 98
    comp       ir al estado 35


Estado 66

   20 exp: exp OR . exp

    VALOR_FLOAT    desplazar e ir al estado 2
    VALOR_DOUBLE   desplazar e ir al estado 3
    VALOR_INT      desplazar e ir al estado 4
    VALOR_BOOL     desplazar e ir al estado 5
    VALOR_LONG     desplazar e ir al estado 6
    VALOR_CHAR     desplazar e ir al estado 7
    VALOR_STRING   desplazar e ir al estado 8
    IDENTIFICADOR  desplazar e ir al estado 49
    '('            desplazar e ir al estado 50

    tupla      ir al estado 27
    func_call  ir al estado 29
    exp        ir al estado 99
    comp       ir al estado 35


Estado 67

   19 exp: exp AND . exp

    VALOR_FLOAT    desplazar e ir al estado 2
    VALOR_DOUBLE   desplazar e ir al estado 3
    VALOR_INT      desplazar e ir al estado 4
    VALOR_BOOL     desplazar e ir al estado 5
    VALOR_LONG     desplazar e ir al estado 6
    VALOR_CHAR     desplazar e ir al estado 7
    VALOR_STRING   desplazar e ir al estado 8
    IDENTIFICADOR  desplazar e ir al estado 49
    '('            desplazar e ir al estado 50

    tupla      ir al estado 27
    func_call  ir al estado 29
    exp        ir al estado 100
    comp       ir al estado 35


Estado 68

   51 comp: exp MAYORIGUAL . exp

    VALOR_FLOAT    desplazar e ir al estado 2
    VALOR_DOUBLE   desplazar e ir al estado 3
    VALOR_INT      desplazar e ir al estado 4
    VALOR_BOOL     desplazar e ir al estado 5
    VALOR_LONG     desplazar e ir al estado 6
    VALOR_CHAR     desplazar e ir al estado 7
    VALOR_STRING   desplazar e ir al estado 8
    IDENTIFICADOR  desplazar e ir al estado 49
    '('            desplazar e ir al estado 50

    tupla      ir al estado 27
    func_call  ir al estado 29
    exp        ir al estado 101
    comp       ir al estado 35


Estado 69

   50 comp: exp MENORIGUAL . exp

    VALOR_FLOAT    desplazar e ir al estado 2
    VALOR_DOUBLE   desplazar e ir al estado 3
    VALOR_INT      desplazar e ir al estado 4
    VALOR_BOOL     desplazar e ir al estado 5
    VALOR_LONG     desplazar e ir al estado 6
    VALOR_CHAR     desplazar e ir al estado 7
    VALOR_STRING   desplazar e ir al estado 8
    IDENTIFICADOR  desplazar e ir al estado 49
    '('            desplazar e ir al estado 50

    tupla      ir al estado 27
    func_call  ir al estado 29
    exp        ir al estado 102
    comp       ir al estado 35


Estado 70

   49 comp: exp MAYORQUE . exp

    VALOR_FLOAT    desplazar e ir al estado 2
    VALOR_DOUBLE   desplazar e ir al estado 3
    VALOR_INT      desplazar e ir al estado 4
    VALOR_BOOL     desplazar e ir al estado 5
    VALOR_LONG     desplazar e ir al estado 6
    VALOR_CHAR     desplazar e ir al estado 7
    VALOR_STRING   desplazar e ir al estado 8
    IDENTIFICADOR  desplazar e ir al estado 49
    '('            desplazar e ir al estado 50

    tupla      ir al estado 27
    func_call  ir al estado 29
    exp        ir al estado 103
    comp       ir al estado 35


Estado 71

   48 comp: exp MENORQUE . exp

    VALOR_FLOAT    desplazar e ir al estado 2
    VALOR_DOUBLE   desplazar e ir al estado 3
    VALOR_INT      desplazar e ir al estado 4
    VALOR_BOOL     desplazar e ir al estado 5
    VALOR_LONG     desplazar e ir al estado 6
    VALOR_CHAR     desplazar e ir al estado 7
    VALOR_STRING   desplazar e ir al estado 8
    IDENTIFICADOR  desplazar e ir al estado 49
    '('            desplazar e ir al estado 50

    tupla      ir al estado 27
    func_call  ir al estado 29
    exp        ir al estado 104
    comp       ir al estado 35


Estado 72

   15 exp: exp '-' . exp

    VALOR_FLOAT    desplazar e ir al estado 2
    VALOR_DOUBLE   desplazar e ir al estado 3
    VALOR_INT      desplazar e ir al estado 4
    VALOR_BOOL     desplazar e ir al estado 5
    VALOR_LONG     desplazar e ir al estado 6
    VALOR_CHAR     desplazar e ir al estado 7
    VALOR_STRING   desplazar e ir al estado 8
    IDENTIFICADOR  desplazar e ir al estado 49
    '('            desplazar e ir al estado 50

    tupla      ir al estado 27
    func_call  ir al estado 29
    exp        ir al estado 105
    comp       ir al estado 35


Estado 73

   16 exp: exp '+' . exp

    VALOR_FLOAT    desplazar e ir al estado 2
    VALOR_DOUBLE   desplazar e ir al estado 3
    VALOR_INT      desplazar e ir al estado 4
    VALOR_BOOL     desplazar e ir al estado 5
    VALOR_LONG     desplazar e ir al estado 6
    VALOR_CHAR     desplazar e ir al estado 7
    VALOR_STRING   desplazar e ir al estado 8
    IDENTIFICADOR  desplazar e ir al estado 49
    '('            desplazar e ir al estado 50

    tupla      ir al estado 27
    func_call  ir al estado 29
    exp        ir al estado 106
    comp       ir al estado 35


Estado 74

   18 exp: exp '*' . exp

    VALOR_FLOAT    desplazar e ir al estado 2
    VALOR_DOUBLE   desplazar e ir al estado 3
    VALOR_INT      desplazar e ir al estado 4
    VALOR_BOOL     desplazar e ir al estado 5
    VALOR_LONG     desplazar e ir al estado 6
    VALOR_CHAR     desplazar e ir al estado 7
    VALOR_STRING   desplazar e ir al estado 8
    IDENTIFICADOR  desplazar e ir al estado 49
    '('            desplazar e ir al estado 50

    tupla      ir al estado 27
    func_call  ir al estado 29
    exp        ir al estado 107
    comp       ir al estado 35


Estado 75

   17 exp: exp '/' . exp

    VALOR_FLOAT    desplazar e ir al estado 2
    VALOR_DOUBLE   desplazar e ir al estado 3
    VALOR_INT      desplazar e ir al estado 4
    VALOR_BOOL     desplazar e ir al estado 5
    VALOR_LONG     desplazar e ir al estado 6
    VALOR_CHAR     desplazar e ir al estado 7
    VALOR_STRING   desplazar e ir al estado 8
    IDENTIFICADOR  desplazar e ir al estado 49
    '('            desplazar e ir al estado 50

    tupla      ir al estado 27
    func_call  ir al estado 29
    exp        ir al estado 108
    comp       ir al estado 35


Estado 76

   45 init: tipo IDENTIFICADOR . '=' exp FIN_DE_LINEA
   47 decl: tipo IDENTIFICADOR . FIN_DE_LINEA
   70 func: tipo IDENTIFICADOR . '(' ')' @3 ':' FIN_DE_LINEA bloque funcFinal
   72     | tipo IDENTIFICADOR . '(' args ')' @4 ':' FIN_DE_LINEA bloque funcFinal

    FIN_DE_LINEA  desplazar e ir al estado 109
    '='           desplazar e ir al estado 110
    '('           desplazar e ir al estado 111


Estado 77

   45 init: tipo . IDENTIFICADOR '=' exp FIN_DE_LINEA
   47 decl: tipo . IDENTIFICADOR FIN_DE_LINEA

    IDENTIFICADOR  desplazar e ir al estado 112


Estado 78

   65 inst_l: inst inst_l .

    $default  reduce usando la regla 65 (inst_l)


Estado 79

    5 lista: inst_l FIN_DE_LINEA . lista

    error          desplazar e ir al estado 1
    VALOR_FLOAT    desplazar e ir al estado 2
    VALOR_DOUBLE   desplazar e ir al estado 3
    VALOR_INT      desplazar e ir al estado 4
    VALOR_BOOL     desplazar e ir al estado 5
    VALOR_LONG     desplazar e ir al estado 6
    VALOR_CHAR     desplazar e ir al estado 7
    VALOR_STRING   desplazar e ir al estado 8
    IDENTIFICADOR  desplazar e ir al estado 9
    FIN_DE_LINEA   desplazar e ir al estado 10
    INT            desplazar e ir al estado 11
    LONG           desplazar e ir al estado 12
    FLOAT          desplazar e ir al estado 13
    DOUBLE         desplazar e ir al estado 14
    BOOL           desplazar e ir al estado 15
    STRING         desplazar e ir al estado 16
    VOID           desplazar e ir al estado 17
    CHAR           desplazar e ir al estado 18
    WHEN           desplazar e ir al estado 19
    IF             desplazar e ir al estado 20
    WHILE          desplazar e ir al estado 21
    FOR            desplazar e ir al estado 22
    RETURN         desplazar e ir al estado 23
    ABREBLOQUE     desplazar e ir al estado 24
    '('            desplazar e ir al estado 25

    $end  reduce usando la regla 7 (lista)

    lista       ir al estado 113
    tupla       ir al estado 27
    tupla_decl  ir al estado 28
    func_call   ir al estado 29
    exp         ir al estado 30
    tipo        ir al estado 31
    init        ir al estado 32
    assign      ir al estado 33
    decl        ir al estado 34
    comp        ir al estado 35
    inst        ir al estado 36
    inst_l      ir al estado 37
    bloque      ir al estado 38
    func        ir al estado 39
    when        ir al estado 40
    for         ir al estado 41
    if          ir al estado 42
    while       ir al estado 43


Estado 80

    4 lista: func lista .

    $default  reduce usando la regla 4 (lista)


Estado 81

    2 lista: error FIN_DE_LINEA $@1 . lista

    error          desplazar e ir al estado 1
    VALOR_FLOAT    desplazar e ir al estado 2
    VALOR_DOUBLE   desplazar e ir al estado 3
    VALOR_INT      desplazar e ir al estado 4
    VALOR_BOOL     desplazar e ir al estado 5
    VALOR_LONG     desplazar e ir al estado 6
    VALOR_CHAR     desplazar e ir al estado 7
    VALOR_STRING   desplazar e ir al estado 8
    IDENTIFICADOR  desplazar e ir al estado 9
    FIN_DE_LINEA   desplazar e ir al estado 10
    INT            desplazar e ir al estado 11
    LONG           desplazar e ir al estado 12
    FLOAT          desplazar e ir al estado 13
    DOUBLE         desplazar e ir al estado 14
    BOOL           desplazar e ir al estado 15
    STRING         desplazar e ir al estado 16
    VOID           desplazar e ir al estado 17
    CHAR           desplazar e ir al estado 18
    WHEN           desplazar e ir al estado 19
    IF             desplazar e ir al estado 20
    WHILE          desplazar e ir al estado 21
    FOR            desplazar e ir al estado 22
    RETURN         desplazar e ir al estado 23
    ABREBLOQUE     desplazar e ir al estado 24
    '('            desplazar e ir al estado 25

    $end  reduce usando la regla 7 (lista)

    lista       ir al estado 114
    tupla       ir al estado 27
    tupla_decl  ir al estado 28
    func_call   ir al estado 29
    exp         ir al estado 30
    tipo        ir al estado 31
    init        ir al estado 32
    assign      ir al estado 33
    decl        ir al estado 34
    comp        ir al estado 35
    inst        ir al estado 36
    inst_l      ir al estado 37
    bloque      ir al estado 38
    func        ir al estado 39
    when        ir al estado 40
    for         ir al estado 41
    if          ir al estado 42
    while       ir al estado 43


Estado 82

   15 exp: exp . '-' exp
   16    | exp . '+' exp
   17    | exp . '/' exp
   18    | exp . '*' exp
   19    | exp . AND exp
   20    | exp . OR exp
   32    | exp . ACCESO
   46 assign: IDENTIFICADOR '=' exp . FIN_DE_LINEA
   48 comp: exp . MENORQUE exp
   49     | exp . MAYORQUE exp
   50     | exp . MENORIGUAL exp
   51     | exp . MAYORIGUAL exp
   52     | exp . IS exp
   53     | exp . NOTIS exp

    ACCESO        desplazar e ir al estado 62
    FIN_DE_LINEA  desplazar e ir al estado 115
    NOTIS         desplazar e ir al estado 64
    IS            desplazar e ir al estado 65
    OR            desplazar e ir al estado 66
    AND           desplazar e ir al estado 67
    MAYORIGUAL    desplazar e ir al estado 68
    MENORIGUAL    desplazar e ir al estado 69
    MAYORQUE      desplazar e ir al estado 70
    MENORQUE      desplazar e ir al estado 71
    '-'           desplazar e ir al estado 72
    '+'           desplazar e ir al estado 73
    '*'           desplazar e ir al estado 74
    '/'           desplazar e ir al estado 75


Estado 83

   10 tupla: '(' . exp_l ')'
   13 func_call: IDENTIFICADOR func_call_init '(' . ')'

    VALOR_FLOAT    desplazar e ir al estado 2
    VALOR_DOUBLE   desplazar e ir al estado 3
    VALOR_INT      desplazar e ir al estado 4
    VALOR_BOOL     desplazar e ir al estado 5
    VALOR_LONG     desplazar e ir al estado 6
    VALOR_CHAR     desplazar e ir al estado 7
    VALOR_STRING   desplazar e ir al estado 8
    IDENTIFICADOR  desplazar e ir al estado 49
    '('            desplazar e ir al estado 50
    ')'            desplazar e ir al estado 116

    exp_l      ir al estado 57
    tupla      ir al estado 27
    func_call  ir al estado 29
    exp        ir al estado 58
    comp       ir al estado 35


Estado 84

   12 func_call: IDENTIFICADOR func_call_init tupla .

    $default  reduce usando la regla 12 (func_call)


Estado 85

   74 func: VOID IDENTIFICADOR '(' . ')' @5 ':' FIN_DE_LINEA bloque funcFinal
   76     | VOID IDENTIFICADOR '(' . args ')' @6 ':' FIN_DE_LINEA bloque funcFinal

    INT     desplazar e ir al estado 11
    LONG    desplazar e ir al estado 12
    FLOAT   desplazar e ir al estado 13
    DOUBLE  desplazar e ir al estado 14
    BOOL    desplazar e ir al estado 15
    STRING  desplazar e ir al estado 16
    CHAR    desplazar e ir al estado 18
    '('     desplazar e ir al estado 117
    ')'     desplazar e ir al estado 118

    tupla_decl  ir al estado 28
    tipo        ir al estado 119
    args        ir al estado 120


Estado 86

   84 when: WHEN exp ':' . FIN_DE_LINEA ABREBLOQUE @8 cases CIERRABLOQUE

    FIN_DE_LINEA  desplazar e ir al estado 121


Estado 87

   87 if: IF exp ':' . FIN_DE_LINEA ne if_evalua_expresion bloque
   89   | IF exp ':' . FIN_DE_LINEA ne if_evalua_expresion bloque ne @10 elif_l

    FIN_DE_LINEA  desplazar e ir al estado 122


Estado 88

  102 while: WHILE ne ne . $@12 exp ':' $@13 FIN_DE_LINEA bloque

    $default  reduce usando la regla 100 ($@12)

    $@12  ir al estado 123


Estado 89

   86 for: FOR IDENTIFICADOR IN . rango ne ne ':' FIN_DE_LINEA $@9 bloque

    VALOR_FLOAT    desplazar e ir al estado 2
    VALOR_DOUBLE   desplazar e ir al estado 3
    VALOR_INT      desplazar e ir al estado 4
    VALOR_BOOL     desplazar e ir al estado 5
    VALOR_LONG     desplazar e ir al estado 6
    VALOR_CHAR     desplazar e ir al estado 7
    VALOR_STRING   desplazar e ir al estado 8
    IDENTIFICADOR  desplazar e ir al estado 49
    '('            desplazar e ir al estado 50

    tupla      ir al estado 27
    func_call  ir al estado 29
    exp        ir al estado 124
    comp       ir al estado 35
    rango      ir al estado 125


Estado 90

   63 inst: RETURN exp FIN_DE_LINEA .

    $default  reduce usando la regla 63 (inst)


Estado 91

   68 dentroBloque: inst_l .

    $default  reduce usando la regla 68 (dentroBloque)


Estado 92

   67 bloque: ABREBLOQUE $@2 dentroBloque . CIERRABLOQUE

    CIERRABLOQUE  desplazar e ir al estado 126


Estado 93

   10 tupla: '(' exp_l ')' .

    $default  reduce usando la regla 10 (tupla)


Estado 94

    9 exp_l: exp ',' . exp_l

    VALOR_FLOAT    desplazar e ir al estado 2
    VALOR_DOUBLE   desplazar e ir al estado 3
    VALOR_INT      desplazar e ir al estado 4
    VALOR_BOOL     desplazar e ir al estado 5
    VALOR_LONG     desplazar e ir al estado 6
    VALOR_CHAR     desplazar e ir al estado 7
    VALOR_STRING   desplazar e ir al estado 8
    IDENTIFICADOR  desplazar e ir al estado 49
    '('            desplazar e ir al estado 50

    exp_l      ir al estado 127
    tupla      ir al estado 27
    func_call  ir al estado 29
    exp        ir al estado 58
    comp       ir al estado 35


Estado 95

   42 tipo_l: tipo ',' . tipo_l

    INT     desplazar e ir al estado 11
    LONG    desplazar e ir al estado 12
    FLOAT   desplazar e ir al estado 13
    DOUBLE  desplazar e ir al estado 14
    BOOL    desplazar e ir al estado 15
    STRING  desplazar e ir al estado 16
    CHAR    desplazar e ir al estado 18
    '('     desplazar e ir al estado 117

    tupla_decl  ir al estado 28
    tipo        ir al estado 59
    tipo_l      ir al estado 128


Estado 96

   11 tupla_decl: '(' tipo_l ')' .

    $default  reduce usando la regla 11 (tupla_decl)


Estado 97

   15 exp: exp . '-' exp
   16    | exp . '+' exp
   17    | exp . '/' exp
   18    | exp . '*' exp
   19    | exp . AND exp
   20    | exp . OR exp
   32    | exp . ACCESO
   48 comp: exp . MENORQUE exp
   49     | exp . MAYORQUE exp
   50     | exp . MENORIGUAL exp
   51     | exp . MAYORIGUAL exp
   52     | exp . IS exp
   53     | exp . NOTIS exp
   53     | exp NOTIS exp .

    ACCESO      desplazar e ir al estado 62
    MAYORIGUAL  desplazar e ir al estado 68
    MENORIGUAL  desplazar e ir al estado 69
    MAYORQUE    desplazar e ir al estado 70
    MENORQUE    desplazar e ir al estado 71
    '-'         desplazar e ir al estado 72
    '+'         desplazar e ir al estado 73
    '*'         desplazar e ir al estado 74
    '/'         desplazar e ir al estado 75

    $default  reduce usando la regla 53 (comp)


Estado 98

   15 exp: exp . '-' exp
   16    | exp . '+' exp
   17    | exp . '/' exp
   18    | exp . '*' exp
   19    | exp . AND exp
   20    | exp . OR exp
   32    | exp . ACCESO
   48 comp: exp . MENORQUE exp
   49     | exp . MAYORQUE exp
   50     | exp . MENORIGUAL exp
   51     | exp . MAYORIGUAL exp
   52     | exp . IS exp
   52     | exp IS exp .
   53     | exp . NOTIS exp

    ACCESO      desplazar e ir al estado 62
    MAYORIGUAL  desplazar e ir al estado 68
    MENORIGUAL  desplazar e ir al estado 69
    MAYORQUE    desplazar e ir al estado 70
    MENORQUE    desplazar e ir al estado 71
    '-'         desplazar e ir al estado 72
    '+'         desplazar e ir al estado 73
    '*'         desplazar e ir al estado 74
    '/'         desplazar e ir al estado 75

    $default  reduce usando la regla 52 (comp)


Estado 99

   15 exp: exp . '-' exp
   16    | exp . '+' exp
   17    | exp . '/' exp
   18    | exp . '*' exp
   19    | exp . AND exp
   20    | exp . OR exp
   20    | exp OR exp .
   32    | exp . ACCESO
   48 comp: exp . MENORQUE exp
   49     | exp . MAYORQUE exp
   50     | exp . MENORIGUAL exp
   51     | exp . MAYORIGUAL exp
   52     | exp . IS exp
   53     | exp . NOTIS exp

    ACCESO      desplazar e ir al estado 62
    NOTIS       desplazar e ir al estado 64
    IS          desplazar e ir al estado 65
    MAYORIGUAL  desplazar e ir al estado 68
    MENORIGUAL  desplazar e ir al estado 69
    MAYORQUE    desplazar e ir al estado 70
    MENORQUE    desplazar e ir al estado 71
    '-'         desplazar e ir al estado 72
    '+'         desplazar e ir al estado 73
    '*'         desplazar e ir al estado 74
    '/'         desplazar e ir al estado 75

    $default  reduce usando la regla 20 (exp)


Estado 100

   15 exp: exp . '-' exp
   16    | exp . '+' exp
   17    | exp . '/' exp
   18    | exp . '*' exp
   19    | exp . AND exp
   19    | exp AND exp .
   20    | exp . OR exp
   32    | exp . ACCESO
   48 comp: exp . MENORQUE exp
   49     | exp . MAYORQUE exp
   50     | exp . MENORIGUAL exp
   51     | exp . MAYORIGUAL exp
   52     | exp . IS exp
   53     | exp . NOTIS exp

    ACCESO      desplazar e ir al estado 62
    NOTIS       desplazar e ir al estado 64
    IS          desplazar e ir al estado 65
    MAYORIGUAL  desplazar e ir al estado 68
    MENORIGUAL  desplazar e ir al estado 69
    MAYORQUE    desplazar e ir al estado 70
    MENORQUE    desplazar e ir al estado 71
    '-'         desplazar e ir al estado 72
    '+'         desplazar e ir al estado 73
    '*'         desplazar e ir al estado 74
    '/'         desplazar e ir al estado 75

    $default  reduce usando la regla 19 (exp)


Estado 101

   15 exp: exp . '-' exp
   16    | exp . '+' exp
   17    | exp . '/' exp
   18    | exp . '*' exp
   19    | exp . AND exp
   20    | exp . OR exp
   32    | exp . ACCESO
   48 comp: exp . MENORQUE exp
   49     | exp . MAYORQUE exp
   50     | exp . MENORIGUAL exp
   51     | exp . MAYORIGUAL exp
   51     | exp MAYORIGUAL exp .
   52     | exp . IS exp
   53     | exp . NOTIS exp

    ACCESO  desplazar e ir al estado 62
    '-'     desplazar e ir al estado 72
    '+'     desplazar e ir al estado 73
    '*'     desplazar e ir al estado 74
    '/'     desplazar e ir al estado 75

    $default  reduce usando la regla 51 (comp)


Estado 102

   15 exp: exp . '-' exp
   16    | exp . '+' exp
   17    | exp . '/' exp
   18    | exp . '*' exp
   19    | exp . AND exp
   20    | exp . OR exp
   32    | exp . ACCESO
   48 comp: exp . MENORQUE exp
   49     | exp . MAYORQUE exp
   50     | exp . MENORIGUAL exp
   50     | exp MENORIGUAL exp .
   51     | exp . MAYORIGUAL exp
   52     | exp . IS exp
   53     | exp . NOTIS exp

    ACCESO  desplazar e ir al estado 62
    '-'     desplazar e ir al estado 72
    '+'     desplazar e ir al estado 73
    '*'     desplazar e ir al estado 74
    '/'     desplazar e ir al estado 75

    $default  reduce usando la regla 50 (comp)


Estado 103

   15 exp: exp . '-' exp
   16    | exp . '+' exp
   17    | exp . '/' exp
   18    | exp . '*' exp
   19    | exp . AND exp
   20    | exp . OR exp
   32    | exp . ACCESO
   48 comp: exp . MENORQUE exp
   49     | exp . MAYORQUE exp
   49     | exp MAYORQUE exp .
   50     | exp . MENORIGUAL exp
   51     | exp . MAYORIGUAL exp
   52     | exp . IS exp
   53     | exp . NOTIS exp

    ACCESO  desplazar e ir al estado 62
    '-'     desplazar e ir al estado 72
    '+'     desplazar e ir al estado 73
    '*'     desplazar e ir al estado 74
    '/'     desplazar e ir al estado 75

    $default  reduce usando la regla 49 (comp)


Estado 104

   15 exp: exp . '-' exp
   16    | exp . '+' exp
   17    | exp . '/' exp
   18    | exp . '*' exp
   19    | exp . AND exp
   20    | exp . OR exp
   32    | exp . ACCESO
   48 comp: exp . MENORQUE exp
   48     | exp MENORQUE exp .
   49     | exp . MAYORQUE exp
   50     | exp . MENORIGUAL exp
   51     | exp . MAYORIGUAL exp
   52     | exp . IS exp
   53     | exp . NOTIS exp

    ACCESO  desplazar e ir al estado 62
    '-'     desplazar e ir al estado 72
    '+'     desplazar e ir al estado 73
    '*'     desplazar e ir al estado 74
    '/'     desplazar e ir al estado 75

    $default  reduce usando la regla 48 (comp)


Estado 105

   15 exp: exp . '-' exp
   15    | exp '-' exp .
   16    | exp . '+' exp
   17    | exp . '/' exp
   18    | exp . '*' exp
   19    | exp . AND exp
   20    | exp . OR exp
   32    | exp . ACCESO
   48 comp: exp . MENORQUE exp
   49     | exp . MAYORQUE exp
   50     | exp . MENORIGUAL exp
   51     | exp . MAYORIGUAL exp
   52     | exp . IS exp
   53     | exp . NOTIS exp

    ACCESO  desplazar e ir al estado 62
    '*'     desplazar e ir al estado 74
    '/'     desplazar e ir al estado 75

    $default  reduce usando la regla 15 (exp)


Estado 106

   15 exp: exp . '-' exp
   16    | exp . '+' exp
   16    | exp '+' exp .
   17    | exp . '/' exp
   18    | exp . '*' exp
   19    | exp . AND exp
   20    | exp . OR exp
   32    | exp . ACCESO
   48 comp: exp . MENORQUE exp
   49     | exp . MAYORQUE exp
   50     | exp . MENORIGUAL exp
   51     | exp . MAYORIGUAL exp
   52     | exp . IS exp
   53     | exp . NOTIS exp

    ACCESO  desplazar e ir al estado 62
    '*'     desplazar e ir al estado 74
    '/'     desplazar e ir al estado 75

    $default  reduce usando la regla 16 (exp)


Estado 107

   15 exp: exp . '-' exp
   16    | exp . '+' exp
   17    | exp . '/' exp
   18    | exp . '*' exp
   18    | exp '*' exp .
   19    | exp . AND exp
   20    | exp . OR exp
   32    | exp . ACCESO
   48 comp: exp . MENORQUE exp
   49     | exp . MAYORQUE exp
   50     | exp . MENORIGUAL exp
   51     | exp . MAYORIGUAL exp
   52     | exp . IS exp
   53     | exp . NOTIS exp

    ACCESO  desplazar e ir al estado 62

    $default  reduce usando la regla 18 (exp)


Estado 108

   15 exp: exp . '-' exp
   16    | exp . '+' exp
   17    | exp . '/' exp
   17    | exp '/' exp .
   18    | exp . '*' exp
   19    | exp . AND exp
   20    | exp . OR exp
   32    | exp . ACCESO
   48 comp: exp . MENORQUE exp
   49     | exp . MAYORQUE exp
   50     | exp . MENORIGUAL exp
   51     | exp . MAYORIGUAL exp
   52     | exp . IS exp
   53     | exp . NOTIS exp

    ACCESO  desplazar e ir al estado 62

    $default  reduce usando la regla 17 (exp)


Estado 109

   47 decl: tipo IDENTIFICADOR FIN_DE_LINEA .

    $default  reduce usando la regla 47 (decl)


Estado 110

   45 init: tipo IDENTIFICADOR '=' . exp FIN_DE_LINEA

    VALOR_FLOAT    desplazar e ir al estado 2
    VALOR_DOUBLE   desplazar e ir al estado 3
    VALOR_INT      desplazar e ir al estado 4
    VALOR_BOOL     desplazar e ir al estado 5
    VALOR_LONG     desplazar e ir al estado 6
    VALOR_CHAR     desplazar e ir al estado 7
    VALOR_STRING   desplazar e ir al estado 8
    IDENTIFICADOR  desplazar e ir al estado 49
    '('            desplazar e ir al estado 50

    tupla      ir al estado 27
    func_call  ir al estado 29
    exp        ir al estado 129
    comp       ir al estado 35


Estado 111

   70 func: tipo IDENTIFICADOR '(' . ')' @3 ':' FIN_DE_LINEA bloque funcFinal
   72     | tipo IDENTIFICADOR '(' . args ')' @4 ':' FIN_DE_LINEA bloque funcFinal

    INT     desplazar e ir al estado 11
    LONG    desplazar e ir al estado 12
    FLOAT   desplazar e ir al estado 13
    DOUBLE  desplazar e ir al estado 14
    BOOL    desplazar e ir al estado 15
    STRING  desplazar e ir al estado 16
    CHAR    desplazar e ir al estado 18
    '('     desplazar e ir al estado 117
    ')'     desplazar e ir al estado 130

    tupla_decl  ir al estado 28
    tipo        ir al estado 119
    args        ir al estado 131


Estado 112

   45 init: tipo IDENTIFICADOR . '=' exp FIN_DE_LINEA
   47 decl: tipo IDENTIFICADOR . FIN_DE_LINEA

    FIN_DE_LINEA  desplazar e ir al estado 109
    '='           desplazar e ir al estado 110


Estado 113

    5 lista: inst_l FIN_DE_LINEA lista .

    $default  reduce usando la regla 5 (lista)


Estado 114

    2 lista: error FIN_DE_LINEA $@1 lista .

    $default  reduce usando la regla 2 (lista)


Estado 115

   46 assign: IDENTIFICADOR '=' exp FIN_DE_LINEA .

    $default  reduce usando la regla 46 (assign)


Estado 116

   13 func_call: IDENTIFICADOR func_call_init '(' ')' .

    $default  reduce usando la regla 13 (func_call)


Estado 117

   11 tupla_decl: '(' . tipo_l ')'

    INT     desplazar e ir al estado 11
    LONG    desplazar e ir al estado 12
    FLOAT   desplazar e ir al estado 13
    DOUBLE  desplazar e ir al estado 14
    BOOL    desplazar e ir al estado 15
    STRING  desplazar e ir al estado 16
    CHAR    desplazar e ir al estado 18
    '('     desplazar e ir al estado 117

    tupla_decl  ir al estado 28
    tipo        ir al estado 59
    tipo_l      ir al estado 60


Estado 118

   74 func: VOID IDENTIFICADOR '(' ')' . @5 ':' FIN_DE_LINEA bloque funcFinal

    $default  reduce usando la regla 73 (@5)

    @5  ir al estado 132


Estado 119

   43 args: tipo . IDENTIFICADOR
   44     | tipo . IDENTIFICADOR ',' args

    IDENTIFICADOR  desplazar e ir al estado 133


Estado 120

   76 func: VOID IDENTIFICADOR '(' args . ')' @6 ':' FIN_DE_LINEA bloque funcFinal

    ')'  desplazar e ir al estado 134


Estado 121

   84 when: WHEN exp ':' FIN_DE_LINEA . ABREBLOQUE @8 cases CIERRABLOQUE

    ABREBLOQUE  desplazar e ir al estado 135


Estado 122

   87 if: IF exp ':' FIN_DE_LINEA . ne if_evalua_expresion bloque
   89   | IF exp ':' FIN_DE_LINEA . ne if_evalua_expresion bloque ne @10 elif_l

    $default  reduce usando la regla 94 (ne)

    ne  ir al estado 136


Estado 123

  102 while: WHILE ne ne $@12 . exp ':' $@13 FIN_DE_LINEA bloque

    VALOR_FLOAT    desplazar e ir al estado 2
    VALOR_DOUBLE   desplazar e ir al estado 3
    VALOR_INT      desplazar e ir al estado 4
    VALOR_BOOL     desplazar e ir al estado 5
    VALOR_LONG     desplazar e ir al estado 6
    VALOR_CHAR     desplazar e ir al estado 7
    VALOR_STRING   desplazar e ir al estado 8
    IDENTIFICADOR  desplazar e ir al estado 49
    '('            desplazar e ir al estado 50

    tupla      ir al estado 27
    func_call  ir al estado 29
    exp        ir al estado 137
    comp       ir al estado 35


Estado 124

   15 exp: exp . '-' exp
   16    | exp . '+' exp
   17    | exp . '/' exp
   18    | exp . '*' exp
   19    | exp . AND exp
   20    | exp . OR exp
   32    | exp . ACCESO
   48 comp: exp . MENORQUE exp
   49     | exp . MAYORQUE exp
   50     | exp . MENORIGUAL exp
   51     | exp . MAYORIGUAL exp
   52     | exp . IS exp
   53     | exp . NOTIS exp
  103 rango: exp . RANGE exp
  104      | exp . RANGE exp ',' exp

    ACCESO      desplazar e ir al estado 62
    NOTIS       desplazar e ir al estado 64
    IS          desplazar e ir al estado 65
    OR          desplazar e ir al estado 66
    AND         desplazar e ir al estado 67
    RANGE       desplazar e ir al estado 138
    MAYORIGUAL  desplazar e ir al estado 68
    MENORIGUAL  desplazar e ir al estado 69
    MAYORQUE    desplazar e ir al estado 70
    MENORQUE    desplazar e ir al estado 71
    '-'         desplazar e ir al estado 72
    '+'         desplazar e ir al estado 73
    '*'         desplazar e ir al estado 74
    '/'         desplazar e ir al estado 75


Estado 125

   86 for: FOR IDENTIFICADOR IN rango . ne ne ':' FIN_DE_LINEA $@9 bloque

    $default  reduce usando la regla 94 (ne)

    ne  ir al estado 139


Estado 126

   67 bloque: ABREBLOQUE $@2 dentroBloque CIERRABLOQUE .

    $default  reduce usando la regla 67 (bloque)


Estado 127

    9 exp_l: exp ',' exp_l .

    $default  reduce usando la regla 9 (exp_l)


Estado 128

   42 tipo_l: tipo ',' tipo_l .

    $default  reduce usando la regla 42 (tipo_l)


Estado 129

   15 exp: exp . '-' exp
   16    | exp . '+' exp
   17    | exp . '/' exp
   18    | exp . '*' exp
   19    | exp . AND exp
   20    | exp . OR exp
   32    | exp . ACCESO
   45 init: tipo IDENTIFICADOR '=' exp . FIN_DE_LINEA
   48 comp: exp . MENORQUE exp
   49     | exp . MAYORQUE exp
   50     | exp . MENORIGUAL exp
   51     | exp . MAYORIGUAL exp
   52     | exp . IS exp
   53     | exp . NOTIS exp

    ACCESO        desplazar e ir al estado 62
    FIN_DE_LINEA  desplazar e ir al estado 140
    NOTIS         desplazar e ir al estado 64
    IS            desplazar e ir al estado 65
    OR            desplazar e ir al estado 66
    AND           desplazar e ir al estado 67
    MAYORIGUAL    desplazar e ir al estado 68
    MENORIGUAL    desplazar e ir al estado 69
    MAYORQUE      desplazar e ir al estado 70
    MENORQUE      desplazar e ir al estado 71
    '-'           desplazar e ir al estado 72
    '+'           desplazar e ir al estado 73
    '*'           desplazar e ir al estado 74
    '/'           desplazar e ir al estado 75


Estado 130

   70 func: tipo IDENTIFICADOR '(' ')' . @3 ':' FIN_DE_LINEA bloque funcFinal

    $default  reduce usando la regla 69 (@3)

    @3  ir al estado 141


Estado 131

   72 func: tipo IDENTIFICADOR '(' args . ')' @4 ':' FIN_DE_LINEA bloque funcFinal

    ')'  desplazar e ir al estado 142


Estado 132

   74 func: VOID IDENTIFICADOR '(' ')' @5 . ':' FIN_DE_LINEA bloque funcFinal

    ':'  desplazar e ir al estado 143


Estado 133

   43 args: tipo IDENTIFICADOR .
   44     | tipo IDENTIFICADOR . ',' args

    ','  desplazar e ir al estado 144

    $default  reduce usando la regla 43 (args)


Estado 134

   76 func: VOID IDENTIFICADOR '(' args ')' . @6 ':' FIN_DE_LINEA bloque funcFinal

    $default  reduce usando la regla 75 (@6)

    @6  ir al estado 145


Estado 135

   84 when: WHEN exp ':' FIN_DE_LINEA ABREBLOQUE . @8 cases CIERRABLOQUE

    $default  reduce usando la regla 83 (@8)

    @8  ir al estado 146


Estado 136

   87 if: IF exp ':' FIN_DE_LINEA ne . if_evalua_expresion bloque
   89   | IF exp ':' FIN_DE_LINEA ne . if_evalua_expresion bloque ne @10 elif_l

    $default  reduce usando la regla 97 (if_evalua_expresion)

    if_evalua_expresion  ir al estado 147


Estado 137

   15 exp: exp . '-' exp
   16    | exp . '+' exp
   17    | exp . '/' exp
   18    | exp . '*' exp
   19    | exp . AND exp
   20    | exp . OR exp
   32    | exp . ACCESO
   48 comp: exp . MENORQUE exp
   49     | exp . MAYORQUE exp
   50     | exp . MENORIGUAL exp
   51     | exp . MAYORIGUAL exp
   52     | exp . IS exp
   53     | exp . NOTIS exp
  102 while: WHILE ne ne $@12 exp . ':' $@13 FIN_DE_LINEA bloque

    ACCESO      desplazar e ir al estado 62
    NOTIS       desplazar e ir al estado 64
    IS          desplazar e ir al estado 65
    OR          desplazar e ir al estado 66
    AND         desplazar e ir al estado 67
    MAYORIGUAL  desplazar e ir al estado 68
    MENORIGUAL  desplazar e ir al estado 69
    MAYORQUE    desplazar e ir al estado 70
    MENORQUE    desplazar e ir al estado 71
    '-'         desplazar e ir al estado 72
    '+'         desplazar e ir al estado 73
    '*'         desplazar e ir al estado 74
    '/'         desplazar e ir al estado 75
    ':'         desplazar e ir al estado 148


Estado 138

  103 rango: exp RANGE . exp
  104      | exp RANGE . exp ',' exp

    VALOR_FLOAT    desplazar e ir al estado 2
    VALOR_DOUBLE   desplazar e ir al estado 3
    VALOR_INT      desplazar e ir al estado 4
    VALOR_BOOL     desplazar e ir al estado 5
    VALOR_LONG     desplazar e ir al estado 6
    VALOR_CHAR     desplazar e ir al estado 7
    VALOR_STRING   desplazar e ir al estado 8
    IDENTIFICADOR  desplazar e ir al estado 49
    '('            desplazar e ir al estado 50

    tupla      ir al estado 27
    func_call  ir al estado 29
    exp        ir al estado 149
    comp       ir al estado 35


Estado 139

   86 for: FOR IDENTIFICADOR IN rango ne . ne ':' FIN_DE_LINEA $@9 bloque

    $default  reduce usando la regla 94 (ne)

    ne  ir al estado 150


Estado 140

   45 init: tipo IDENTIFICADOR '=' exp FIN_DE_LINEA .

    $default  reduce usando la regla 45 (init)


Estado 141

   70 func: tipo IDENTIFICADOR '(' ')' @3 . ':' FIN_DE_LINEA bloque funcFinal

    ':'  desplazar e ir al estado 151


Estado 142

   72 func: tipo IDENTIFICADOR '(' args ')' . @4 ':' FIN_DE_LINEA bloque funcFinal

    $default  reduce usando la regla 71 (@4)

    @4  ir al estado 152


Estado 143

   74 func: VOID IDENTIFICADOR '(' ')' @5 ':' . FIN_DE_LINEA bloque funcFinal

    FIN_DE_LINEA  desplazar e ir al estado 153


Estado 144

   44 args: tipo IDENTIFICADOR ',' . args

    INT     desplazar e ir al estado 11
    LONG    desplazar e ir al estado 12
    FLOAT   desplazar e ir al estado 13
    DOUBLE  desplazar e ir al estado 14
    BOOL    desplazar e ir al estado 15
    STRING  desplazar e ir al estado 16
    CHAR    desplazar e ir al estado 18
    '('     desplazar e ir al estado 117

    tupla_decl  ir al estado 28
    tipo        ir al estado 119
    args        ir al estado 154


Estado 145

   76 func: VOID IDENTIFICADOR '(' args ')' @6 . ':' FIN_DE_LINEA bloque funcFinal

    ':'  desplazar e ir al estado 155


Estado 146

   84 when: WHEN exp ':' FIN_DE_LINEA ABREBLOQUE @8 . cases CIERRABLOQUE

    VALOR_FLOAT    desplazar e ir al estado 2
    VALOR_DOUBLE   desplazar e ir al estado 3
    VALOR_INT      desplazar e ir al estado 4
    VALOR_BOOL     desplazar e ir al estado 5
    VALOR_LONG     desplazar e ir al estado 6
    VALOR_CHAR     desplazar e ir al estado 7
    VALOR_STRING   desplazar e ir al estado 8
    IDENTIFICADOR  desplazar e ir al estado 49
    '('            desplazar e ir al estado 50

    tupla      ir al estado 27
    func_call  ir al estado 29
    exp        ir al estado 156
    comp       ir al estado 35
    cases      ir al estado 157


Estado 147

   87 if: IF exp ':' FIN_DE_LINEA ne if_evalua_expresion . bloque
   89   | IF exp ':' FIN_DE_LINEA ne if_evalua_expresion . bloque ne @10 elif_l

    ABREBLOQUE  desplazar e ir al estado 24

    bloque  ir al estado 158


Estado 148

  102 while: WHILE ne ne $@12 exp ':' . $@13 FIN_DE_LINEA bloque

    $default  reduce usando la regla 101 ($@13)

    $@13  ir al estado 159


Estado 149

   15 exp: exp . '-' exp
   16    | exp . '+' exp
   17    | exp . '/' exp
   18    | exp . '*' exp
   19    | exp . AND exp
   20    | exp . OR exp
   32    | exp . ACCESO
   48 comp: exp . MENORQUE exp
   49     | exp . MAYORQUE exp
   50     | exp . MENORIGUAL exp
   51     | exp . MAYORIGUAL exp
   52     | exp . IS exp
   53     | exp . NOTIS exp
  103 rango: exp RANGE exp .
  104      | exp RANGE exp . ',' exp

    ACCESO      desplazar e ir al estado 62
    NOTIS       desplazar e ir al estado 64
    IS          desplazar e ir al estado 65
    OR          desplazar e ir al estado 66
    AND         desplazar e ir al estado 67
    MAYORIGUAL  desplazar e ir al estado 68
    MENORIGUAL  desplazar e ir al estado 69
    MAYORQUE    desplazar e ir al estado 70
    MENORQUE    desplazar e ir al estado 71
    ','         desplazar e ir al estado 160
    '-'         desplazar e ir al estado 72
    '+'         desplazar e ir al estado 73
    '*'         desplazar e ir al estado 74
    '/'         desplazar e ir al estado 75

    $default  reduce usando la regla 103 (rango)


Estado 150

   86 for: FOR IDENTIFICADOR IN rango ne ne . ':' FIN_DE_LINEA $@9 bloque

    ':'  desplazar e ir al estado 161


Estado 151

   70 func: tipo IDENTIFICADOR '(' ')' @3 ':' . FIN_DE_LINEA bloque funcFinal

    FIN_DE_LINEA  desplazar e ir al estado 162


Estado 152

   72 func: tipo IDENTIFICADOR '(' args ')' @4 . ':' FIN_DE_LINEA bloque funcFinal

    ':'  desplazar e ir al estado 163


Estado 153

   74 func: VOID IDENTIFICADOR '(' ')' @5 ':' FIN_DE_LINEA . bloque funcFinal

    ABREBLOQUE  desplazar e ir al estado 24

    bloque  ir al estado 164


Estado 154

   44 args: tipo IDENTIFICADOR ',' args .

    $default  reduce usando la regla 44 (args)


Estado 155

   76 func: VOID IDENTIFICADOR '(' args ')' @6 ':' . FIN_DE_LINEA bloque funcFinal

    FIN_DE_LINEA  desplazar e ir al estado 165


Estado 156

   15 exp: exp . '-' exp
   16    | exp . '+' exp
   17    | exp . '/' exp
   18    | exp . '*' exp
   19    | exp . AND exp
   20    | exp . OR exp
   32    | exp . ACCESO
   48 comp: exp . MENORQUE exp
   49     | exp . MAYORQUE exp
   50     | exp . MENORIGUAL exp
   51     | exp . MAYORIGUAL exp
   52     | exp . IS exp
   53     | exp . NOTIS exp
   78 cases: exp . case_cond WHEN_CASE exp case_jump
   80      | exp . case_cond WHEN_CASE exp case_jump FIN_DE_LINEA @7 cases

    ACCESO      desplazar e ir al estado 62
    NOTIS       desplazar e ir al estado 64
    IS          desplazar e ir al estado 65
    OR          desplazar e ir al estado 66
    AND         desplazar e ir al estado 67
    MAYORIGUAL  desplazar e ir al estado 68
    MENORIGUAL  desplazar e ir al estado 69
    MAYORQUE    desplazar e ir al estado 70
    MENORQUE    desplazar e ir al estado 71
    '-'         desplazar e ir al estado 72
    '+'         desplazar e ir al estado 73
    '*'         desplazar e ir al estado 74
    '/'         desplazar e ir al estado 75

    $default  reduce usando la regla 81 (case_cond)

    case_cond  ir al estado 166


Estado 157

   84 when: WHEN exp ':' FIN_DE_LINEA ABREBLOQUE @8 cases . CIERRABLOQUE

    CIERRABLOQUE  desplazar e ir al estado 167


Estado 158

   87 if: IF exp ':' FIN_DE_LINEA ne if_evalua_expresion bloque .
   89   | IF exp ':' FIN_DE_LINEA ne if_evalua_expresion bloque . ne @10 elif_l

    ELIF      reduce usando la regla 94 (ne)
    ELSE      reduce usando la regla 94 (ne)
    $default  reduce usando la regla 87 (if)

    ne  ir al estado 168


Estado 159

  102 while: WHILE ne ne $@12 exp ':' $@13 . FIN_DE_LINEA bloque

    FIN_DE_LINEA  desplazar e ir al estado 169


Estado 160

  104 rango: exp RANGE exp ',' . exp

    VALOR_FLOAT    desplazar e ir al estado 2
    VALOR_DOUBLE   desplazar e ir al estado 3
    VALOR_INT      desplazar e ir al estado 4
    VALOR_BOOL     desplazar e ir al estado 5
    VALOR_LONG     desplazar e ir al estado 6
    VALOR_CHAR     desplazar e ir al estado 7
    VALOR_STRING   desplazar e ir al estado 8
    IDENTIFICADOR  desplazar e ir al estado 49
    '('            desplazar e ir al estado 50

    tupla      ir al estado 27
    func_call  ir al estado 29
    exp        ir al estado 170
    comp       ir al estado 35


Estado 161

   86 for: FOR IDENTIFICADOR IN rango ne ne ':' . FIN_DE_LINEA $@9 bloque

    FIN_DE_LINEA  desplazar e ir al estado 171


Estado 162

   70 func: tipo IDENTIFICADOR '(' ')' @3 ':' FIN_DE_LINEA . bloque funcFinal

    ABREBLOQUE  desplazar e ir al estado 24

    bloque  ir al estado 172


Estado 163

   72 func: tipo IDENTIFICADOR '(' args ')' @4 ':' . FIN_DE_LINEA bloque funcFinal

    FIN_DE_LINEA  desplazar e ir al estado 173


Estado 164

   74 func: VOID IDENTIFICADOR '(' ')' @5 ':' FIN_DE_LINEA bloque . funcFinal

    $default  reduce usando la regla 77 (funcFinal)

    funcFinal  ir al estado 174


Estado 165

   76 func: VOID IDENTIFICADOR '(' args ')' @6 ':' FIN_DE_LINEA . bloque funcFinal

    ABREBLOQUE  desplazar e ir al estado 24

    bloque  ir al estado 175


Estado 166

   78 cases: exp case_cond . WHEN_CASE exp case_jump
   80      | exp case_cond . WHEN_CASE exp case_jump FIN_DE_LINEA @7 cases

    WHEN_CASE  desplazar e ir al estado 176


Estado 167

   84 when: WHEN exp ':' FIN_DE_LINEA ABREBLOQUE @8 cases CIERRABLOQUE .

    $default  reduce usando la regla 84 (when)


Estado 168

   89 if: IF exp ':' FIN_DE_LINEA ne if_evalua_expresion bloque ne . @10 elif_l

    $default  reduce usando la regla 88 (@10)

    @10  ir al estado 177


Estado 169

  102 while: WHILE ne ne $@12 exp ':' $@13 FIN_DE_LINEA . bloque

    ABREBLOQUE  desplazar e ir al estado 24

    bloque  ir al estado 178


Estado 170

   15 exp: exp . '-' exp
   16    | exp . '+' exp
   17    | exp . '/' exp
   18    | exp . '*' exp
   19    | exp . AND exp
   20    | exp . OR exp
   32    | exp . ACCESO
   48 comp: exp . MENORQUE exp
   49     | exp . MAYORQUE exp
   50     | exp . MENORIGUAL exp
   51     | exp . MAYORIGUAL exp
   52     | exp . IS exp
   53     | exp . NOTIS exp
  104 rango: exp RANGE exp ',' exp .

    ACCESO      desplazar e ir al estado 62
    NOTIS       desplazar e ir al estado 64
    IS          desplazar e ir al estado 65
    OR          desplazar e ir al estado 66
    AND         desplazar e ir al estado 67
    MAYORIGUAL  desplazar e ir al estado 68
    MENORIGUAL  desplazar e ir al estado 69
    MAYORQUE    desplazar e ir al estado 70
    MENORQUE    desplazar e ir al estado 71
    '-'         desplazar e ir al estado 72
    '+'         desplazar e ir al estado 73
    '*'         desplazar e ir al estado 74
    '/'         desplazar e ir al estado 75

    $default  reduce usando la regla 104 (rango)


Estado 171

   86 for: FOR IDENTIFICADOR IN rango ne ne ':' FIN_DE_LINEA . $@9 bloque

    $default  reduce usando la regla 85 ($@9)

    $@9  ir al estado 179


Estado 172

   70 func: tipo IDENTIFICADOR '(' ')' @3 ':' FIN_DE_LINEA bloque . funcFinal

    $default  reduce usando la regla 77 (funcFinal)

    funcFinal  ir al estado 180


Estado 173

   72 func: tipo IDENTIFICADOR '(' args ')' @4 ':' FIN_DE_LINEA . bloque funcFinal

    ABREBLOQUE  desplazar e ir al estado 24

    bloque  ir al estado 181


Estado 174

   74 func: VOID IDENTIFICADOR '(' ')' @5 ':' FIN_DE_LINEA bloque funcFinal .

    $default  reduce usando la regla 74 (func)


Estado 175

   76 func: VOID IDENTIFICADOR '(' args ')' @6 ':' FIN_DE_LINEA bloque . funcFinal

    $default  reduce usando la regla 77 (funcFinal)

    funcFinal  ir al estado 182


Estado 176

   78 cases: exp case_cond WHEN_CASE . exp case_jump
   80      | exp case_cond WHEN_CASE . exp case_jump FIN_DE_LINEA @7 cases

    VALOR_FLOAT    desplazar e ir al estado 2
    VALOR_DOUBLE   desplazar e ir al estado 3
    VALOR_INT      desplazar e ir al estado 4
    VALOR_BOOL     desplazar e ir al estado 5
    VALOR_LONG     desplazar e ir al estado 6
    VALOR_CHAR     desplazar e ir al estado 7
    VALOR_STRING   desplazar e ir al estado 8
    IDENTIFICADOR  desplazar e ir al estado 49
    '('            desplazar e ir al estado 50

    tupla      ir al estado 27
    func_call  ir al estado 29
    exp        ir al estado 183
    comp       ir al estado 35


Estado 177

   89 if: IF exp ':' FIN_DE_LINEA ne if_evalua_expresion bloque ne @10 . elif_l

    ELIF  desplazar e ir al estado 184
    ELSE  desplazar e ir al estado 185

    elif_l  ir al estado 186


Estado 178

  102 while: WHILE ne ne $@12 exp ':' $@13 FIN_DE_LINEA bloque .

    $default  reduce usando la regla 102 (while)


Estado 179

   86 for: FOR IDENTIFICADOR IN rango ne ne ':' FIN_DE_LINEA $@9 . bloque

    ABREBLOQUE  desplazar e ir al estado 24

    bloque  ir al estado 187


Estado 180

   70 func: tipo IDENTIFICADOR '(' ')' @3 ':' FIN_DE_LINEA bloque funcFinal .

    $default  reduce usando la regla 70 (func)


Estado 181

   72 func: tipo IDENTIFICADOR '(' args ')' @4 ':' FIN_DE_LINEA bloque . funcFinal

    $default  reduce usando la regla 77 (funcFinal)

    funcFinal  ir al estado 188


Estado 182

   76 func: VOID IDENTIFICADOR '(' args ')' @6 ':' FIN_DE_LINEA bloque funcFinal .

    $default  reduce usando la regla 76 (func)


Estado 183

   15 exp: exp . '-' exp
   16    | exp . '+' exp
   17    | exp . '/' exp
   18    | exp . '*' exp
   19    | exp . AND exp
   20    | exp . OR exp
   32    | exp . ACCESO
   48 comp: exp . MENORQUE exp
   49     | exp . MAYORQUE exp
   50     | exp . MENORIGUAL exp
   51     | exp . MAYORIGUAL exp
   52     | exp . IS exp
   53     | exp . NOTIS exp
   78 cases: exp case_cond WHEN_CASE exp . case_jump
   80      | exp case_cond WHEN_CASE exp . case_jump FIN_DE_LINEA @7 cases

    ACCESO      desplazar e ir al estado 62
    NOTIS       desplazar e ir al estado 64
    IS          desplazar e ir al estado 65
    OR          desplazar e ir al estado 66
    AND         desplazar e ir al estado 67
    MAYORIGUAL  desplazar e ir al estado 68
    MENORIGUAL  desplazar e ir al estado 69
    MAYORQUE    desplazar e ir al estado 70
    MENORQUE    desplazar e ir al estado 71
    '-'         desplazar e ir al estado 72
    '+'         desplazar e ir al estado 73
    '*'         desplazar e ir al estado 74
    '/'         desplazar e ir al estado 75

    $default  reduce usando la regla 82 (case_jump)

    case_jump  ir al estado 189


Estado 184

   90 elif_l: ELIF . elif_control exp ':' FIN_DE_LINEA ne elif_eval bloque
   91       | ELIF . elif_control exp ':' FIN_DE_LINEA ne elif_eval bloque elif_copia_salida elif_copia_siguiente elif_l

    $default  reduce usando la regla 95 (elif_control)

    elif_control  ir al estado 190


Estado 185

   93 elif_l: ELSE . ':' FIN_DE_LINEA $@11 bloque

    ':'  desplazar e ir al estado 191


Estado 186

   89 if: IF exp ':' FIN_DE_LINEA ne if_evalua_expresion bloque ne @10 elif_l .

    $default  reduce usando la regla 89 (if)


Estado 187

   86 for: FOR IDENTIFICADOR IN rango ne ne ':' FIN_DE_LINEA $@9 bloque .

    $default  reduce usando la regla 86 (for)


Estado 188

   72 func: tipo IDENTIFICADOR '(' args ')' @4 ':' FIN_DE_LINEA bloque funcFinal .

    $default  reduce usando la regla 72 (func)


Estado 189

   78 cases: exp case_cond WHEN_CASE exp case_jump .
   80      | exp case_cond WHEN_CASE exp case_jump . FIN_DE_LINEA @7 cases

    FIN_DE_LINEA  desplazar e ir al estado 192

    $default  reduce usando la regla 78 (cases)


Estado 190

   90 elif_l: ELIF elif_control . exp ':' FIN_DE_LINEA ne elif_eval bloque
   91       | ELIF elif_control . exp ':' FIN_DE_LINEA ne elif_eval bloque elif_copia_salida elif_copia_siguiente elif_l

    VALOR_FLOAT    desplazar e ir al estado 2
    VALOR_DOUBLE   desplazar e ir al estado 3
    VALOR_INT      desplazar e ir al estado 4
    VALOR_BOOL     desplazar e ir al estado 5
    VALOR_LONG     desplazar e ir al estado 6
    VALOR_CHAR     desplazar e ir al estado 7
    VALOR_STRING   desplazar e ir al estado 8
    IDENTIFICADOR  desplazar e ir al estado 49
    '('            desplazar e ir al estado 50

    tupla      ir al estado 27
    func_call  ir al estado 29
    exp        ir al estado 193
    comp       ir al estado 35


Estado 191

   93 elif_l: ELSE ':' . FIN_DE_LINEA $@11 bloque

    FIN_DE_LINEA  desplazar e ir al estado 194


Estado 192

   80 cases: exp case_cond WHEN_CASE exp case_jump FIN_DE_LINEA . @7 cases

    $default  reduce usando la regla 79 (@7)

    @7  ir al estado 195


Estado 193

   15 exp: exp . '-' exp
   16    | exp . '+' exp
   17    | exp . '/' exp
   18    | exp . '*' exp
   19    | exp . AND exp
   20    | exp . OR exp
   32    | exp . ACCESO
   48 comp: exp . MENORQUE exp
   49     | exp . MAYORQUE exp
   50     | exp . MENORIGUAL exp
   51     | exp . MAYORIGUAL exp
   52     | exp . IS exp
   53     | exp . NOTIS exp
   90 elif_l: ELIF elif_control exp . ':' FIN_DE_LINEA ne elif_eval bloque
   91       | ELIF elif_control exp . ':' FIN_DE_LINEA ne elif_eval bloque elif_copia_salida elif_copia_siguiente elif_l

    ACCESO      desplazar e ir al estado 62
    NOTIS       desplazar e ir al estado 64
    IS          desplazar e ir al estado 65
    OR          desplazar e ir al estado 66
    AND         desplazar e ir al estado 67
    MAYORIGUAL  desplazar e ir al estado 68
    MENORIGUAL  desplazar e ir al estado 69
    MAYORQUE    desplazar e ir al estado 70
    MENORQUE    desplazar e ir al estado 71
    '-'         desplazar e ir al estado 72
    '+'         desplazar e ir al estado 73
    '*'         desplazar e ir al estado 74
    '/'         desplazar e ir al estado 75
    ':'         desplazar e ir al estado 196


Estado 194

   93 elif_l: ELSE ':' FIN_DE_LINEA . $@11 bloque

    $default  reduce usando la regla 92 ($@11)

    $@11  ir al estado 197


Estado 195

   80 cases: exp case_cond WHEN_CASE exp case_jump FIN_DE_LINEA @7 . cases

    VALOR_FLOAT    desplazar e ir al estado 2
    VALOR_DOUBLE   desplazar e ir al estado 3
    VALOR_INT      desplazar e ir al estado 4
    VALOR_BOOL     desplazar e ir al estado 5
    VALOR_LONG     desplazar e ir al estado 6
    VALOR_CHAR     desplazar e ir al estado 7
    VALOR_STRING   desplazar e ir al estado 8
    IDENTIFICADOR  desplazar e ir al estado 49
    '('            desplazar e ir al estado 50

    tupla      ir al estado 27
    func_call  ir al estado 29
    exp        ir al estado 156
    comp       ir al estado 35
    cases      ir al estado 198


Estado 196

   90 elif_l: ELIF elif_control exp ':' . FIN_DE_LINEA ne elif_eval bloque
   91       | ELIF elif_control exp ':' . FIN_DE_LINEA ne elif_eval bloque elif_copia_salida elif_copia_siguiente elif_l

    FIN_DE_LINEA  desplazar e ir al estado 199


Estado 197

   93 elif_l: ELSE ':' FIN_DE_LINEA $@11 . bloque

    ABREBLOQUE  desplazar e ir al estado 24

    bloque  ir al estado 200


Estado 198

   80 cases: exp case_cond WHEN_CASE exp case_jump FIN_DE_LINEA @7 cases .

    $default  reduce usando la regla 80 (cases)


Estado 199

   90 elif_l: ELIF elif_control exp ':' FIN_DE_LINEA . ne elif_eval bloque
   91       | ELIF elif_control exp ':' FIN_DE_LINEA . ne elif_eval bloque elif_copia_salida elif_copia_siguiente elif_l

    $default  reduce usando la regla 94 (ne)

    ne  ir al estado 201


Estado 200

   93 elif_l: ELSE ':' FIN_DE_LINEA $@11 bloque .

    $default  reduce usando la regla 93 (elif_l)


Estado 201

   90 elif_l: ELIF elif_control exp ':' FIN_DE_LINEA ne . elif_eval bloque
   91       | ELIF elif_control exp ':' FIN_DE_LINEA ne . elif_eval bloque elif_copia_salida elif_copia_siguiente elif_l

    $default  reduce usando la regla 96 (elif_eval)

    elif_eval  ir al estado 202


Estado 202

   90 elif_l: ELIF elif_control exp ':' FIN_DE_LINEA ne elif_eval . bloque
   91       | ELIF elif_control exp ':' FIN_DE_LINEA ne elif_eval . bloque elif_copia_salida elif_copia_siguiente elif_l

    ABREBLOQUE  desplazar e ir al estado 24

    bloque  ir al estado 203


Estado 203

   90 elif_l: ELIF elif_control exp ':' FIN_DE_LINEA ne elif_eval bloque .
   91       | ELIF elif_control exp ':' FIN_DE_LINEA ne elif_eval bloque . elif_copia_salida elif_copia_siguiente elif_l

    ELIF      reduce usando la regla 98 (elif_copia_salida)
    ELSE      reduce usando la regla 98 (elif_copia_salida)
    $default  reduce usando la regla 90 (elif_l)

    elif_copia_salida  ir al estado 204


Estado 204

   91 elif_l: ELIF elif_control exp ':' FIN_DE_LINEA ne elif_eval bloque elif_copia_salida . elif_copia_siguiente elif_l

    $default  reduce usando la regla 99 (elif_copia_siguiente)

    elif_copia_siguiente  ir al estado 205


Estado 205

   91 elif_l: ELIF elif_control exp ':' FIN_DE_LINEA ne elif_eval bloque elif_copia_salida elif_copia_siguiente . elif_l

    ELIF  desplazar e ir al estado 184
    ELSE  desplazar e ir al estado 185

    elif_l  ir al estado 206


Estado 206

   91 elif_l: ELIF elif_control exp ':' FIN_DE_LINEA ne elif_eval bloque elif_copia_salida elif_copia_siguiente elif_l .

    $default  reduce usando la regla 91 (elif_l)
